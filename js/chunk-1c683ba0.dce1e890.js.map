{"version":3,"sources":["webpack:///./src/components/Widgets/NdRamHistory.vue?e3dd","webpack:///src/components/Widgets/NdRamHistory.vue","webpack:///./src/components/Widgets/NdRamHistory.vue?10e8","webpack:///./src/components/Widgets/NdRamHistory.vue","webpack:///./src/components/Widgets/NdRamHistory.vue?7757"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","chartId","staticRenderFns","mixins","components","computed","netDataHost","apiVersion","endpoint","methods","fetchData","processData","inputData","data","labels","timeData","resultGroup","Object","datasets","name","type","values","averages","renderCharts","timeChartData","aggregateChartData","generateHistoryChart","title","height","colors","truncateLegends","lineOptions","regionFill","hideDots","axisOptions","xIsSeries","xAxisMode","tooltipOptions","formatTooltipY","generateAggregateChart","barOptions","depth","component"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,yBAAyB,CAACF,EAAG,MAAM,CAACE,YAAY,QAAQC,MAAM,CAAC,GAAM,aAAeP,EAAIQ,WAAYJ,EAAG,MAAM,CAACE,YAAY,QAAQC,MAAM,CAAC,GAAKP,EAAIQ,cACpQC,EAAkB,G,4ECUP,GACfC,uBACAC,cACAC,UAEAC,YAFA,WAGA,wBACA,8BAIA,GAHA,yCACA,KAIAC,WAVA,WAWA,sCAEAC,SAbA,WAcA,4FAGAP,QAjBA,WAkBA,mEAGAQ,SAEAC,UAFA,WAGA,wDAGAC,YANA,SAMAC,GAAA,WACA,WAAI,EAAJ,OAGA,KACA,KACAC,iCACAC,yBACA,MACAC,gCAEA,gBACAC,uBAMA,SACA,KACAC,oCACAC,QAAAC,OAAAC,WAAAC,cACAC,uCAIA,OAAAR,SAAAI,YACA,GAAAJ,kBAAAI,WAAAG,YACA,wBAEAE,aApCA,SAoCAC,EAAAC,GACA,6BACA,gCAGAC,qBAzCA,SAyCAF,GACA,gDACAG,kDACAd,OACAO,kBACAQ,wBACAC,wBACAC,mBACAC,aACAC,aACAC,YAEAC,aACAC,aACAC,kBAEAC,gBACAC,2BAAA,yCAIAC,uBA9DA,SA8DAd,GACA,0DACAE,sDACAd,OACAO,kBACAQ,WACAC,wBACAW,YACAZ,UACAa,cC1GqW,I,wBCQjWC,EAAY,eACd,EACAlD,EACAU,GACA,EACA,KACA,KACA,MAIa,aAAAwC,E,6CCnBf,W","file":"js/chunk-1c683ba0.dce1e890.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"memory-charts-wrapper\"},[_c('div',{staticClass:\"chart\",attrs:{\"id\":(\"aggregate-\" + _vm.chartId)}}),_c('div',{staticClass:\"chart\",attrs:{\"id\":_vm.chartId}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n<div class=\"memory-charts-wrapper\">\n  <div class=\"chart\" :id=\"`aggregate-${chartId}`\"></div>\n  <div class=\"chart\" :id=\"chartId\"></div>\n</div>\n</template>\n\n<script>\nimport WidgetMixin from '@/mixins/WidgetMixin';\nimport ChartingMixin from '@/mixins/ChartingMixin';\n\nexport default {\n  mixins: [WidgetMixin, ChartingMixin],\n  components: {},\n  computed: {\n    /* URL where NetData is hosted */\n    netDataHost() {\n      const usersChoice = this.options.host;\n      if (!usersChoice || typeof usersChoice !== 'string') {\n        this.error('Host parameter is required');\n        return '';\n      }\n      return usersChoice;\n    },\n    apiVersion() {\n      return this.options.apiVersion || 'v1';\n    },\n    endpoint() {\n      return `${this.netDataHost}/api/${this.apiVersion}/data?chart=system.ram`;\n    },\n    /* A sudo-random ID for the chart DOM element */\n    chartId() {\n      return `cpu-history-chart-${Math.round(Math.random() * 10000)}`;\n    },\n  },\n  methods: {\n    /* Make GET request to NetData */\n    fetchData() {\n      this.makeRequest(this.endpoint).then(this.processData);\n    },\n    /* Assign data variables to the returned data */\n    processData(inputData) {\n      const { labels, data } = inputData;\n\n      // Convert data to an object for easy working\n      const timeData = []; // List of timestamps for axis\n      const resultGroup = {}; // List of datasets, for each label\n      data.reverse().forEach((reading) => {\n        labels.forEach((label, indx) => {\n          if (indx === 0) { // First value is the timestamp, add to axis\n            timeData.push(this.formatTime(reading[indx] * 1000));\n          } else { // All other values correspond to a label\n            if (!resultGroup[label]) resultGroup[label] = [];\n            resultGroup[label].push(reading[indx]);\n          }\n        });\n      });\n\n      // Put data in the format expected by the charts\n      const averages = [];\n      const datasets = [];\n      Object.keys(resultGroup).forEach((label) => {\n        datasets.push({ name: label, type: 'bar', values: resultGroup[label] });\n        averages.push(Math.round(this.average(resultGroup[label])));\n      });\n\n      // Set results as component attributes, and call to render\n      const timeChartData = { labels: timeData, datasets };\n      const aggregateChartData = { labels: labels.slice(1), datasets: [{ values: averages }] };\n      this.renderCharts(timeChartData, aggregateChartData);\n    },\n    renderCharts(timeChartData, aggregateChartData) {\n      this.generateHistoryChart(timeChartData);\n      this.generateAggregateChart(aggregateChartData);\n    },\n    /* Create new chart, using the crypto data */\n    generateHistoryChart(timeChartData) {\n      return new this.Chart(`#${this.chartId}`, {\n        title: this.$t('widgets.net-data.mem-chart-title'),\n        data: timeChartData,\n        type: 'axis-mixed',\n        height: this.chartHeight,\n        colors: this.chartColors,\n        truncateLegends: true,\n        lineOptions: {\n          regionFill: 1,\n          hideDots: 1,\n        },\n        axisOptions: {\n          xIsSeries: true,\n          xAxisMode: 'tick',\n        },\n        tooltipOptions: {\n          formatTooltipY: d => `${Math.round(d)}mb`,\n        },\n      });\n    },\n    generateAggregateChart(aggregateChartData) {\n      return new this.Chart(`#aggregate-${this.chartId}`, {\n        title: this.$t('widgets.net-data.mem-breakdown-title'),\n        data: aggregateChartData,\n        type: 'percentage',\n        height: 100,\n        colors: this.chartColors,\n        barOptions: {\n          height: 18,\n          depth: 5,\n        },\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.memory-charts-wrapper .chart {\n  text.title, text.legend-dataset-text {\n    text-transform: capitalize;\n    color: var(--widget-text-color);\n  }\n  .axis, .chart-label {\n    fill: var(--widget-text-color);\n    opacity: var(--dimming-factor);\n    &:hover { opacity: 1; }\n  }\n}\n\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NdRamHistory.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NdRamHistory.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./NdRamHistory.vue?vue&type=template&id=7c668de2&\"\nimport script from \"./NdRamHistory.vue?vue&type=script&lang=js&\"\nexport * from \"./NdRamHistory.vue?vue&type=script&lang=js&\"\nimport style0 from \"./NdRamHistory.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NdRamHistory.vue?vue&type=style&index=0&lang=scss&\""],"sourceRoot":""}