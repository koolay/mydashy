{"version":3,"sources":["webpack:///./src/components/Widgets/CryptoPriceChart.vue?f230","webpack:///src/components/Widgets/CryptoPriceChart.vue","webpack:///./src/components/Widgets/CryptoPriceChart.vue?365d","webpack:///./src/components/Widgets/CryptoPriceChart.vue","webpack:///./src/components/Widgets/CryptoPriceChart.vue?c614"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","chartId","staticRenderFns","mixins","components","data","chartData","chartDom","computed","asset","numDays","currency","dataPoints","endpoint","methods","generateChart","title","type","height","colors","truncateLegends","lineOptions","regionFill","hideDots","axisOptions","xIsSeries","xAxisMode","tooltipOptions","formatTooltipY","fetchData","axios","then","catch","finally","processData","tmpCounter","tmpTotal","incrementAverage","priceLabels","priceChartData","labels","datasets","name","values","renderChart","formatDate","timestamp","includeTime","weekday","day","month","hour","minute","second","formatPrice","price","component"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,qBAAqBC,MAAM,CAAC,GAAKP,EAAIQ,YACvJC,EAAkB,G,+GCUP,GACfC,uBACAC,cACAC,KAHA,WAIA,OACAC,eACAC,gBAGAC,UAEAC,MAFA,WAGA,yBACA,4BACA,WAGAC,QARA,WASA,2BACA,iDACA,EAEA,GAGAC,SAhBA,WAiBA,4BACA,4BACA,OAGAC,WAtBA,WAuBA,8BACA,gDACA,EAEA,IAGAC,SA9BA,WA+BA,gHACA,cADA,iBACA,eAGAZ,QAnCA,WAoCA,oEAGAa,SAEAC,cAFA,WAEA,WACA,4CACAC,2CACAX,oBACAY,kBACAC,wBACAC,wBACAC,mBACAC,aACAC,aACAC,YAEAC,aACAC,aACAC,kBAEAC,gBACAC,2BAAA,+CAKAC,UAxBA,WAwBA,WACAC,uBACAC,MAAA,YACA,IACA,sBACA,SACA,iDAGAC,OAAA,YACA,4CAEAC,SAAA,WACA,sBAOAC,YA5CA,SA4CA7B,GAAA,WACA,KACA,KACA,8CACA,iBAEA,QACA,cACA8B,KAAAC,KACA,WAAAD,IAAAC,MAGA/B,gCAEA,GADAgC,QACA,SACA,yBACAC,6BACAC,UACAF,YAIA,gBACAG,SACAC,UACA,CACAC,aACAzB,WACA0B,YAKA,oBAGAC,YAhFA,WAiFA,oCAGAC,WApFA,SAoFAC,EAAAC,GACA,yBACA,GAAAC,gBAAAC,cAAAC,eACA,GAAAC,eAAAC,iBAAAC,kBACA,sCACA,qCACA,uCAGAC,YA7FA,SA6FAC,GACA,QAMA,OALA,YACA,WACA,YACA,aACA,cACA,gBC/JyW,I,wBCQrWC,EAAY,eACd,EACAhE,EACAU,GACA,EACA,KACA,KACA,MAIa,aAAAsD,E,kECnBf","file":"js/chunk-48dc0af1.212d65e1.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"crypto-price-chart\",attrs:{\"id\":_vm.chartId}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n<div class=\"crypto-price-chart\" :id=\"chartId\"></div>\n</template>\n\n<script>\nimport { Chart } from 'frappe-charts/dist/frappe-charts.min.esm';\nimport axios from 'axios';\nimport WidgetMixin from '@/mixins/WidgetMixin';\nimport ChartingMixin from '@/mixins/ChartingMixin';\nimport { widgetApiEndpoints } from '@/utils/defaults';\n\nexport default {\n  mixins: [WidgetMixin, ChartingMixin],\n  components: {},\n  data() {\n    return {\n      chartData: null,\n      chartDom: null,\n    };\n  },\n  computed: {\n    /* The crypto asset to fetch price data for */\n    asset() {\n      const userChoice = this.options.asset;\n      if (typeof userChoice === 'string') return userChoice;\n      return 'bitcoin';\n    },\n    /* Number of days worth of history to fetch and display */\n    numDays() {\n      const userChoice = this.options.numDays;\n      if (typeof usersChoice === 'number' && userChoice < 30 && userChoice > 0.15) {\n        return userChoice;\n      }\n      return 7;\n    },\n    /* The fiat currency to calculate price data in */\n    currency() {\n      const userChoice = this.options.currency;\n      if (typeof userChoice === 'string') return userChoice;\n      return 'USD';\n    },\n    /* The number of data points to render on the chart */\n    dataPoints() {\n      const userChoice = this.options.dataPoints;\n      if (typeof usersChoice === 'number' && userChoice < 100 && userChoice > 5) {\n        return userChoice;\n      }\n      return 30;\n    },\n    /* The formatted GET request API endpoint to fetch crypto data from */\n    endpoint() {\n      return `${widgetApiEndpoints.cryptoPrices}${this.asset}/`\n      + `market_chart?vs_currency=${this.currency}&days=${this.numDays}`;\n    },\n    /* A sudo-random ID for the chart DOM element */\n    chartId() {\n      return `crypto-price-chart-${Math.round(Math.random() * 10000)}`;\n    },\n  },\n  methods: {\n    /* Create new chart, using the crypto data */\n    generateChart() {\n      return new Chart(`#${this.chartId}`, {\n        title: `${this.asset} Price Chart`,\n        data: this.chartData,\n        type: 'axis-mixed',\n        height: this.chartHeight,\n        colors: this.chartColors,\n        truncateLegends: true,\n        lineOptions: {\n          regionFill: 1,\n          hideDots: 1,\n        },\n        axisOptions: {\n          xIsSeries: true,\n          xAxisMode: 'tick',\n        },\n        tooltipOptions: {\n          formatTooltipY: d => `${d} ${this.currency}`,\n        },\n      });\n    },\n    /* Make GET request to CoinGecko API endpoint */\n    fetchData() {\n      axios.get(this.endpoint)\n        .then((response) => {\n          try {\n            this.processData(response.data);\n          } catch (chartingError) {\n            this.error('Unable to plot results on chart', chartingError);\n          }\n        })\n        .catch((dataFetchError) => {\n          this.error('Unable to fetch crypto data', dataFetchError);\n        })\n        .finally(() => {\n          this.finishLoading();\n        });\n    },\n    /* Generate price history in a format that can be consumed by the chart\n     * To improve efficiency, only a certain amount of data points are plotted\n     * depending on user preference. An average is then calculated between points\n     */\n    processData(data) {\n      const priceChartData = [];\n      const priceLabels = [];\n      const interval = Math.round(data.prices.length / this.dataPoints);\n      const showTime = this.numDays < 5;\n      // Counters for calculating averages between data points\n      let tmpCounter = 0; let tmpTotal = 0;\n      const incrementAverage = (add) => {\n        tmpCounter += 1; tmpTotal += add;\n        if (add === null) { tmpCounter = 0; tmpTotal = 0; }\n      };\n      // For each data point, calc average, and if interval is right, then append\n      data.prices.forEach((priceGroup, index) => {\n        incrementAverage(priceGroup[1]); // Increment averages\n        if (index % interval === 0) {\n          const price = this.formatPrice(tmpTotal / tmpCounter);\n          priceLabels.push(this.formatDate(priceGroup[0], showTime));\n          priceChartData.push(price);\n          incrementAverage(null); // Reset counter\n        }\n      });\n      // Combine results with chart config\n      this.chartData = {\n        labels: priceLabels,\n        datasets: [\n          {\n            name: 'Price',\n            type: 'bar',\n            values: priceChartData,\n          },\n        ],\n      };\n      // Call chart render function\n      this.renderChart();\n    },\n    /* Uses class data to render the line chart */\n    renderChart() {\n      this.chartDom = this.generateChart();\n    },\n    /* Format the date for a given time stamp, also include time if required */\n    formatDate(timestamp, includeTime) {\n      const localFormat = navigator.language;\n      const dateFormat = { weekday: 'short', day: 'numeric', month: 'short' };\n      const timeFormat = { hour: 'numeric', minute: 'numeric', second: 'numeric' };\n      const date = new Date(timestamp).toLocaleDateString(localFormat, dateFormat);\n      const time = Intl.DateTimeFormat(localFormat, timeFormat).format(timestamp);\n      return `${date} ${includeTime ? time : ''}`;\n    },\n    /* Format the price, rounding to given number of decimal places */\n    formatPrice(price) {\n      let numDecimals = 0;\n      if (price < 10) numDecimals = 1;\n      if (price < 1) numDecimals = 2;\n      if (price < 0.1) numDecimals = 3;\n      if (price < 0.01) numDecimals = 4;\n      if (price < 0.001) numDecimals = 5;\n      return price.toFixed(numDecimals);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.crypto-price-chart .chart-container {\n  text.title {\n    text-transform: capitalize;\n    color: var(--widget-text-color);\n  }\n  .axis, .chart-label {\n    fill: var(--widget-text-color);\n    opacity: var(--dimming-factor);\n    &:hover { opacity: 1; }\n  }\n}\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CryptoPriceChart.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CryptoPriceChart.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CryptoPriceChart.vue?vue&type=template&id=a1a83d2c&\"\nimport script from \"./CryptoPriceChart.vue?vue&type=script&lang=js&\"\nexport * from \"./CryptoPriceChart.vue?vue&type=script&lang=js&\"\nimport style0 from \"./CryptoPriceChart.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CryptoPriceChart.vue?vue&type=style&index=0&lang=scss&\""],"sourceRoot":""}